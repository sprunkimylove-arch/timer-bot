import os
import asyncio
import logging
import threading
from datetime import timedelta

from flask import Flask
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("timer-bot")

# ----------------- FLASK HEALTHCHECK -----------------
# –ù–£–ñ–ù–û –¥–ª—è Render: Gunicorn –ø–æ–¥–Ω–∏–º–µ—Ç —ç—Ç–æ—Ç app, —á—Ç–æ–±—ã –±—ã–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
app = Flask(__name__)

@app.get("/")
def health():
    return "OK"

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç.–∫. –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ –∑–∞–¥–∞—ë–º —á–µ—Ä–µ–∑ Envs
if not BOT_TOKEN:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. "
        "–ó–∞–¥–∞–π –µ—ë –≤ Render ‚Üí Environment ‚Üí Add Environment Variable."
    )

# –ö–Ω–æ–ø–∫–∏ 2 —Å–≤–µ—Ä—Ö—É + 1 —à–∏—Ä–æ–∫–æ–π —Å–Ω–∏–∑—É
def main_menu():
    kb = [
        [
            InlineKeyboardButton("‚è± 10 –º–∏–Ω—É—Ç", callback_data="start_10"),
            InlineKeyboardButton("‚è± 20 –º–∏–Ω—É—Ç", callback_data="start_20"),
        ],
        [InlineKeyboardButton("‚è± 30 –º–∏–Ω—É—Ç", callback_data="start_30")],
        [InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data="stop")],
    ]
    return InlineKeyboardMarkup(kb)

# –ò–º—è –¥–∂–æ–±–∞ –ø–æ —á–∞—Ç—É –∏ —é–∑–µ—Ä—É
def job_name(chat_id: int) -> str:
    return f"chat_{chat_id}"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω—è—Ç—å –ø–∏–Ω
PIN_KEY = "pinned_msg_id"
# –ö—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä
STARTER_KEY = "starter_id"
# id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–∞–≤–∏–º
TIMER_MSG_KEY = "timer_msg_id"
# –æ—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç
LEFT_MIN_KEY = "left_min"

# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è"
    await update.message.reply_text(text, reply_markup=main_menu())

async def stop_active_timer(context: ContextTypes.DEFAULT_TYPE, chat_id: int, send_final: bool):
    """–°–Ω—è—Ç—å –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å job, —Ä–∞—Å–ø–∏–Ω–∏—Ç—å, –ø–æ—á–∏—Å—Ç–∏—Ç—å"""
    jq = context.application.job_queue
    # —Å—Ç–æ–ø–∏–º –∑–∞–¥–∞—á—É
    for j in list(jq.get_jobs_by_name(job_name(chat_id)) or []):
        j.schedule_removal()

    # —Ä–∞—Å–ø–∏–Ω–∏—Ç—å
    data = context.chat_data
    pinned_id = data.get(PIN_KEY)
    if pinned_id:
        try:
            await context.bot.unpin_chat_message(chat_id, pinned_id)
        except Exception:
            pass
        data[PIN_KEY] = None

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if send_final:
        starter_id = data.get(STARTER_KEY)
        if starter_id:
            await context.bot.send_message(
                chat_id,
                f"–í—ã–ø–ª–∞—Ç—É –æ–∫–æ–Ω—á–∏–ª! <a href='tg://user?id={starter_id}'>‚Äé</a>",
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )

    # —á–∏—Å—Ç–∏–º –º–µ—Ç–∫–∏
    for k in (STARTER_KEY, TIMER_MSG_KEY, LEFT_MIN_KEY):
        context.chat_data[k] = None

async def pick_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    data = query.data

    # –Ω–∞–∂–∞—Ç–∏–µ "–°—Ç–æ–ø"
    if data == "stop":
        await stop_active_timer(context, chat_id, send_final=True)
        # –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è",
            reply_markup=main_menu(),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    active = context.application.job_queue.get_jobs_by_name(job_name(chat_id))
    if active:
        await query.answer("–£–∂–µ —Ç–∏–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´–°—Ç–æ–ø¬ª.", show_alert=True)
        return

    # –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
    minutes_map = {"start_10": 10, "start_20": 20, "start_30": 30}
    minutes = minutes_map.get(data, 0)
    if minutes == 0:
        return

    # –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª
    starter = query.from_user
    context.chat_data[STARTER_KEY] = starter.id
    context.chat_data[LEFT_MIN_KEY] = minutes

    # –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{minutes} –º–∏–Ω</b>\n–ó–∞–ø—É—Å—Ç–∏–ª: <a href='tg://user?id={starter.id}'>‚Äé</a>"
    if context.chat_data.get(TIMER_MSG_KEY):
        try:
            await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=main_menu())
            timer_msg_id = query.message.message_id
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            m = await query.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=main_menu())
            timer_msg_id = m.message_id
    else:
        m = await query.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=main_menu())
        timer_msg_id = m.message_id

    context.chat_data[TIMER_MSG_KEY] = timer_msg_id

    # –ü–∏–Ω –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        res = await context.bot.pin_chat_message(chat_id, timer_msg_id, disable_notification=True)
        # pinChatMessage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True. pinned_id —É –Ω–∞—Å –Ω–∞—à timer_msg_id
        context.chat_data[PIN_KEY] = timer_msg_id
    except Exception:
        context.chat_data[PIN_KEY] = None

    # —Å—Ç–∞—Ä—Ç job ‚Äî —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –æ–±–Ω–æ–≤–ª—è–µ–º
    context.application.job_queue.run_repeating(
        callback=every_minute_tick,
        interval=60,
        first=60,
        name=job_name(chat_id),
        data={"chat_id": chat_id},
    )

async def every_minute_tick(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: —É–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω—É—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–∏–Ω–∏—à"""
    chat_id = context.job.data["chat_id"]

    left = context.chat_data.get(LEFT_MIN_KEY) or 0
    left = max(0, left - 1)
    context.chat_data[LEFT_MIN_KEY] = left

    # –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    timer_msg_id = context.chat_data.get(TIMER_MSG_KEY)
    starter_id = context.chat_data.get(STARTER_KEY)
    try:
        if timer_msg_id:
            if left > 0:
                txt = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{left} –º–∏–Ω</b>\n–ó–∞–ø—É—Å—Ç–∏–ª: <a href='tg://user?id={starter_id}'>‚Äé</a>"
                await context.bot.edit_message_text(
                    txt, chat_id=chat_id, message_id=timer_msg_id,
                    parse_mode=ParseMode.HTML, reply_markup=main_menu()
                )
            else:
                # –§–∏–Ω–∏—à: —Ä–∞—Å–ø–∏–Ω, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∂–æ–±–∞
                await stop_active_timer(context, chat_id, send_final=True)
    except Exception as e:
        log.warning("Edit/pin/unpin failed: %s", e)

# ----------------- –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢ -----------------
async def tg_main():
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .arbitrary_callback_data(True)
        .build()
    )

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CallbackQueryHandler(pick_timer))

    # –ó–∞–ø—É—Å–∫ long-polling
    log.info("Starting Telegram polling‚Ä¶")
    await application.initialize()
    await application.start()
    try:
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        # –î–µ—Ä–∂–∏–º —Ñ–æ–Ω–æ–≤–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Event().wait()
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()

def _run_tg_in_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–ø–µ—Ç–ª—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
    —á—Ç–æ–±—ã Gunicorn –¥–µ—Ä–∂–∞–ª HTTP-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Flask), –∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(tg_main())

# –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–≤–∞–∂–Ω–æ –¥–ª—è gunicorn)
threading.Thread(target=_run_tg_in_thread, daemon=True).start()

# ----------------- –õ–û–ö–ê–õ–¨–ù–´–ô –°–¢–ê–†–¢ -----------------
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:
    # 1) python bot.py ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç Flask –Ω–∞ 8080 –∏ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    # 2) –í –±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤—å /start
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)
