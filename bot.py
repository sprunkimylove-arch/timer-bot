import os
import asyncio
import logging
import threading
from datetime import datetime, timedelta

from flask import Flask
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("timer-bot")

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –≤ Replit –¥–æ–±–∞–≤–∏–º –≤ Secrets
if not BOT_TOKEN:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. "
        "–ó–∞–¥–∞–π –µ—ë –≤ Replit ‚ûú Secrets (–∫–ª—é—á BOT_TOKEN)."
    )

# –¢–∞–π–º–µ—Ä—ã –ø–æ —á–∞—Ç–∞–º: chat_id -> dict(...)
RUNNING = {}  # { chat_id: {"owner_id": int, "owner_name": str, "until": datetime, "msg_id": int, "pin_id": int} }

# ---------- KEEP-ALIVE –î–õ–Ø REPLIT ----------
# Replit –º–æ–∂–µ—Ç –∑–∞—Å—ã–ø–∞—Ç—å. –≠—Ç–æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –±—É–¥–∏—Ç—å –ø–∏–Ω–≥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UptimeRobot).
app = Flask(__name__)

@app.get("/")
def health():
    return "ok"

def run_keepalive():
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_keepalive, daemon=True).start()

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def fmt_remaining(until: datetime) -> str:
    now = datetime.utcnow()
    if until <= now:
        return "00:00"
    left = until - now
    m, s = divmod(int(left.total_seconds()), 60)
    return f"{m:02d}:{s:02d}"

def timer_active(chat_id: int) -> bool:
    info = RUNNING.get(chat_id)
    if not info:
        return False
    return info["until"] > datetime.utcnow()

def clear_timer(chat_id: int):
    RUNNING.pop(chat_id, None)

def main_keyboard() -> InlineKeyboardMarkup:
    # —Ä—è–¥ 1: 10 –∏ 20 –º–∏–Ω—É—Ç, —Ä—è–¥ 2: –æ–¥–Ω–∞ —à–∏—Ä–æ–∫–∞—è 30
    kb = [
        [
            InlineKeyboardButton("üïí 10 –º–∏–Ω—É—Ç", callback_data="start_10"),
            InlineKeyboardButton("üïì 20 –º–∏–Ω—É—Ç", callback_data="start_20"),
        ],
        [
            InlineKeyboardButton("üïï 30 –º–∏–Ω—É—Ç", callback_data="start_30"),
        ],
        [
            InlineKeyboardButton("‚õî –°—Ç–æ–ø", callback_data="stop"),
        ],
    ]
    return InlineKeyboardMarkup(kb)

async def send_or_edit_timer(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, msg_id: int | None) -> int:
    if msg_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=msg_id, text=text, parse_mode=ParseMode.HTML
            )
            return msg_id
        except Exception:
            pass
    msg = await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
    return msg.message_id

# ---------- JOBS ----------
async def tick(context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."""
    chat_id = context.job.chat_id
    info = RUNNING.get(chat_id)
    if not info:
        return

    if datetime.utcnow() >= info["until"]:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        user_mention = info["owner_name"]
        try:
            await context.bot.send_message(
                chat_id,
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç—É –æ–∫–æ–Ω—á–∏–ª!</b>\n{user_mention}",
                parse_mode=ParseMode.HTML,
            )
        except Exception as e:
            log.warning("send finish msg: %s", e)

        # –°–Ω–∏–º–∞–µ–º –ø–∏–Ω
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=info["pin_id"])
        except Exception:
            # –∏–Ω–æ–≥–¥–∞ –ø–∏–Ω —É–∂–µ —Å–Ω—è—Ç
            pass

        clear_timer(chat_id)
        return

    # –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞
    remain = fmt_remaining(info["until"])
    text = f"‚è± <b>–¢–∞–π–º–µ—Ä</b>\n–û—Å—Ç–∞–ª–æ—Å—å: <b>{remain}</b>\n–ó–∞–ø—É—Å—Ç–∏–ª: {info['owner_name']}\n\n–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è"
    try:
        new_id = await send_or_edit_timer(context, chat_id, text, info["msg_id"])
        info["msg_id"] = new_id
    except Exception as e:
        log.warning("tick edit: %s", e)

# ---------- HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–∞–π–º–µ—Ä-–±–æ—Ç.\n\n–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è",
        reply_markup=main_keyboard()
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    user = query.from_user
    mention = user.mention_html()

    data = query.data or ""

    if data == "stop":
        info = RUNNING.get(chat_id)
        if not info:
            await query.edit_message_reply_markup(reply_markup=main_keyboard())
            await context.bot.send_message(chat_id, "–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return

        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å) ‚Äî –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü:
        if info["owner_id"] != user.id:
            await context.bot.send_message(chat_id, "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª.")
            return

        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=info["pin_id"])
        except Exception:
            pass

        clear_timer(chat_id)
        await context.bot.send_message(chat_id, f"‚úÖ <b>–í—ã–ø–ª–∞—Ç—É –æ–∫–æ–Ω—á–∏–ª!</b>\n{mention}", parse_mode=ParseMode.HTML)
        return

    # –°—Ç–∞—Ä—Ç
    if timer_active(chat_id):
        # —É–∂–µ –∏–¥—ë—Ç ‚Äî –Ω–µ –¥–∞—ë–º –≤—Ç–æ—Ä–æ–π
        await context.bot.send_message(chat_id, "‚õî –£–∂–µ –∏–¥—ë—Ç —Ç–∞–π–º–µ—Ä. –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏ —Ç–µ–∫—É—â–∏–π.")
        return

    minutes = 0
    if data == "start_10":
        minutes = 10
    elif data == "start_20":
        minutes = 20
    elif data == "start_30":
        minutes = 30

    if minutes <= 0:
        return

    until = datetime.utcnow() + timedelta(minutes=minutes)

    # –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    remain = fmt_remaining(until)
    text = f"‚è± <b>–¢–∞–π–º–µ—Ä</b>\n–û—Å—Ç–∞–ª–æ—Å—å: <b>{remain}</b>\n–ó–∞–ø—É—Å—Ç–∏–ª: {mention}\n\n–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è"
    timer_msg = await context.bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)

    # –ø–∏–Ω –±–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    pin_id = timer_msg.message_id
    try:
        await context.bot.pin_chat_message(chat_id=chat_id, message_id=pin_id, disable_notification=True)
    except Exception as e:
        log.warning("pin failed: %s", e)

    RUNNING[chat_id] = {
        "owner_id": user.id,
        "owner_name": mention,
        "until": until,
        "msg_id": timer_msg.message_id,
        "pin_id": pin_id,
    }

    # –ø–æ—Å—Ç–∞–≤–∏—Ç—å job ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    context.job_queue.run_repeating(
        tick,
        interval=60,
        first=60,
        chat_id=chat_id,
        name=f"timer_{chat_id}",
    )

    # –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        await timer_msg.edit_reply_markup(reply_markup=main_keyboard())
    except Exception:
        pass

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "–ö–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—Å–∫–∞–µ—à—å –Ω–∞ 10/20/30 –º–∏–Ω—É—Ç.\n"
        "‚õî –°—Ç–æ–ø ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä (–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª)."
    )

# ---------- MAIN ----------
async def main():
    application: Application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CallbackQueryHandler(handle_buttons))

    log.info("Bot starting...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling(allowed_updates=None)  # polling
    await application.updater.wait()
    await application.stop()
    await application.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped")
