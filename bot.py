import os
import asyncio
import json
import logging
from collections import defaultdict
from datetime import timedelta
from pathlib import Path
from typing import List

# ===== –º–∏–Ω–∏-HTTP —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã —Ö–æ—Å—Ç–∏–Ω–≥ –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç =====
import threading
from flask import Flask

http_app = Flask(__name__)

@http_app.get("/")
def health():
    return "ok"  # healthcheck

def run_http():
    # Koyeb/–¥—Ä—É–≥–∏–µ PaaS –ø–µ—Ä–µ–¥–∞—é—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.getenv("PORT", "8080"))
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ debug, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_app.run(host="0.0.0.0", port=port)
# ===============================================================

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, User
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)

# ---------- –§–ò–ö–° –î–õ–Ø PYTHON 3.14 (event loop) ----------
try:
    asyncio.get_event_loop()
except RuntimeError:
    asyncio.set_event_loop(asyncio.new_event_loop())
# -------------------------------------------------------

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
BOT_TOKEN = os.getenv("8292909315:AAFmaZJr1CNWZhT91JSQgNKLaE0LbMXyKPg")
# BOT_TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ê"   # –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π

PIN_TIMER = True      # –ø–∏–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä (–±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ)
SILENT_PIN = True     # –ø–∏–Ω–∏—Ç—å –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
SUBS_FILE = Path("subs.json")  # —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ /notifyme

# ====== –ü–û–î–ü–ò–°–ö–ò (–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ ¬´–≤—Å–µ—Ö¬ª) ======
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { str(chat_id): set(user_id) }
_SUBS: dict[str, set[int]] = defaultdict(set)

def _load_subs():
    global _SUBS
    if SUBS_FILE.exists():
        try:
            data = json.loads(SUBS_FILE.read_text(encoding="utf-8"))
            _SUBS = defaultdict(set, {k: set(v) for k, v in data.items()})
        except Exception as e:
            logging.warning("subs.json –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω: %s", e)

def _save_subs():
    try:
        SUBS_FILE.write_text(
            json.dumps({k: list(v) for k, v in _SUBS.items()}, ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
    except Exception as e:
        logging.warning("subs.json –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", e)

def _chat_key(chat_id: int) -> str:
    return str(chat_id)

def subscribe_user(chat_id: int, user_id: int) -> int:
    key = _chat_key(chat_id)
    _SUBS[key].add(user_id)
    _save_subs()
    return len(_SUBS[key])

def unsubscribe_user(chat_id: int, user_id: int) -> int:
    key = _chat_key(chat_id)
    _SUBS[key].discard(user_id)
    _save_subs()
    return len(_SUBS[key])

def get_subscribers(chat_id: int) -> List[int]:
    return list(_SUBS.get(_chat_key(chat_id), set()))

# ====== UI ======
def duration_keypad() -> InlineKeyboardMarkup:
    # 10 –∏ 20 ‚Äî –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ; 30 ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (—à–∏—Ä–æ–∫–æ–π)
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üïê 10 –º–∏–Ω", callback_data="timer_10"),
         InlineKeyboardButton("üïí 20 –º–∏–Ω", callback_data="timer_20")],
        [InlineKeyboardButton("‚è±Ô∏è 30 –º–∏–Ω", callback_data="timer_30")],
    ])

def countdown_keypad() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üõë –°—Ç–æ–ø —Ç–∞–π–º–µ—Ä–∞", callback_data="timer_stop")]])

def mention(u: User) -> str:
    return f"@{u.username}" if u.username \
        else f"<a href=\"tg://user?id={u.id}\">{u.first_name}</a>"

def mention_id(uid: int, name: str = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
    return f"<a href=\"tg://user?id={uid}\">{name}</a>"

# ====== –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ (–æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ —á–∞—Ç) ======
def job_name(chat_id: int) -> str:
    return f"timer_{chat_id}"

def has_active_timer(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return bool(context.chat_data.get("active_timer"))

def set_active_timer(context: ContextTypes.DEFAULT_TYPE, owner_id: int, message_id: int):
    context.chat_data["active_timer"] = {"owner_id": owner_id, "message_id": message_id}

def clear_active_timer(context: ContextTypes.DEFAULT_TYPE):
    context.chat_data.pop("active_timer", None)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í –∫–æ–Ω—Ü–µ –ø–∏–Ω–≥—É—é —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª‚ùóÔ∏è",
        reply_markup=duration_keypad()
    )

async def notifyme_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    n = subscribe_user(chat_id, user.id)
    await update.effective_message.reply_text(f"üîî –ü–æ–¥–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {n}")

async def mute_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    n = unsubscribe_user(chat_id, user.id)
    await update.effective_message.reply_text(f"üîï –û—Ç–∫–ª—é—á–∏–ª —Ç–µ–±–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {n}")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    act = context.chat_data.get("active_timer")
    if not act:
        await update.message.reply_text("–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç.")
        return
    if act["owner_id"] != user_id:
        await update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª —Ç–∞–π–º–µ—Ä.")
        return

    jq = context.application.job_queue
    if jq:
        for j in jq.get_jobs_by_name(job_name(chat_id)):
            j.schedule_removal()

    # –∞–Ω–ø–∏–Ω
    try:
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=act["message_id"])
    except Exception as e:
        logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–ø–∏–Ω–∏—Ç—å –ø—Ä–∏ /cancel: %s", e)

    clear_active_timer(context)
    await update.message.reply_text("üõë –¢–≤–æ–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# ====== –¢–∏–∫ —Ç–∞–π–º–µ—Ä–∞ ======
async def timer_tick(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    data = job.data
    data["remaining"] -= 1
    chat_id = data["chat_id"]
    msg_id = data["message_id"]
    owner = data["user"]

    if data["remaining"] > 0:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{data['remaining']}</b> –º–∏–Ω.",
                parse_mode=ParseMode.HTML,
                reply_markup=countdown_keypad()
            )
        except Exception as e:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞: %s", e)
            job.schedule_removal()
            clear_active_timer(context)
    else:
        try:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
        except Exception:
            pass
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–ø–∏–Ω–∏—Ç—å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏: %s", e)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, {mention(owner)}!",
            parse_mode=ParseMode.HTML
        )
        job.schedule_removal()
        clear_active_timer(context)

# ====== –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ======
async def pick_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = query.from_user

    # –∑–∞–ø—Ä–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    act = context.chat_data.get("active_timer")
    if act and act["owner_id"] != user.id:
        await query.answer("–£–∂–µ –∏–¥—ë—Ç —Ç–∞–π–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return

    m = {"timer_10": 10, "timer_20": 20, "timer_30": 30}
    duration = m.get(query.data, 10)

    # —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ job'—ã (–µ—Å–ª–∏ –º–æ–π –∂–µ)
    jq = context.application.job_queue
    if jq:
        for j in jq.get_jobs_by_name(job_name(chat_id)):
            j.schedule_removal()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    first_text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{duration}</b> –º–∏–Ω."
    try:
        await query.edit_message_text(first_text, parse_mode=ParseMode.HTML, reply_markup=countdown_keypad())
        msg_id = query.message.message_id
    except Exception:
        sent = await context.bot.send_message(
            chat_id=chat_id, text=first_text, parse_mode=ParseMode.HTML, reply_markup=countdown_keypad()
        )
        msg_id = sent.message_id

    # –ø–∏–Ω
    if PIN_TIMER:
        try:
            await context.bot.pin_chat_message(chat_id=chat_id, message_id=msg_id, disable_notification=SILENT_PIN)
        except Exception as e:
            logging.info("–ù–µ —Å–º–æ–≥ –∑–∞–∫—Ä–µ–ø–∏—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤?): %s", e)

    # –∑–∞–ø–æ–º–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    set_active_timer(context, owner_id=user.id, message_id=msg_id)

    # —É–≤–µ–¥–æ–º–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subs = get_subscribers(chat_id)
    if subs:
        CHUNK = 15
        for i in range(0, len(subs), CHUNK):
            part = subs[i:i+CHUNK]
            text = f"üîî –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω {mention(user)} ‚Äî –æ–ø–æ–≤–µ—â–∞—é –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö:\n" + \
                   " ".join(mention_id(uid) for uid in part)
            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∏–∫–∏
    if not jq:
        raise RuntimeError('JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: pip install "python-telegram-bot[job-queue]==21.6"')

    jq.run_repeating(
        timer_tick,
        interval=timedelta(minutes=1),
        first=timedelta(minutes=1),
        name=job_name(chat_id),
        data={"remaining": duration, "chat_id": chat_id, "message_id": msg_id, "user": user},
        chat_id=chat_id,
        user_id=user.id
    )

# ====== –°—Ç–æ–ø –∫–Ω–æ–ø–∫–æ–π ======
async def stop_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    msg_id = query.message.message_id
    clicker = query.from_user

    act = context.chat_data.get("active_timer")
    if not act or act["message_id"] != msg_id:
        await query.answer("–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    if act["owner_id"] != clicker.id:
        await query.answer("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª —Ç–∞–π–º–µ—Ä.", show_alert=True)
        return

    jq = context.application.job_queue
    if jq:
        for j in jq.get_jobs_by_name(job_name(chat_id)):
            j.schedule_removal()

    try:
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=msg_id)
    except Exception as e:
        logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–ø–∏–Ω–∏—Ç—å –ø—Ä–∏ —Å—Ç–æ–ø–µ: %s", e)

    try:
        await query.edit_message_text("üõë –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception:
        pass

    clear_active_timer(context)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚úÖ –í—ã–ø–ª–∞—Ç—É –æ–∫–æ–Ω—á–∏–ª! {mention(clicker)}",
        parse_mode=ParseMode.HTML
    )
    await query.answer("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# ====== –ß–∏—Å—Ç–∏–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ ¬´pinned message¬ª ======
async def delete_pin_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.effective_message.delete()
    except Exception as e:
        logging.info("–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–µ pinned-—Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

# ====== MAIN ======
def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. "
                           "–õ–∏–±–æ –∑–∞–¥–∞–π—Ç–µ –µ—ë, –ª–∏–±–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å—Ç—Ä–æ–∫–æ–π –≤ –∫–æ–¥–µ.")

    # –ø–æ–¥–Ω–∏–º–∞–µ–º –º–∏–Ω–∏-HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ (–¥–ª—è healthcheck –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ)
    threading.Thread(target=run_http, daemon=True).start()

    _load_subs()

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("notifyme", notifyme_cmd))
    app.add_handler(CommandHandler("mute", mute_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    app.add_handler(CallbackQueryHandler(pick_timer, pattern=r"^timer_(10|20|30)$"))
    app.add_handler(CallbackQueryHandler(stop_button, pattern=r"^timer_stop$"))

    app.add_handler(MessageHandler(filters.StatusUpdate.PINNED_MESSAGE, delete_pin_service))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∞–ø–¥–µ–π—Ç–æ–≤...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
